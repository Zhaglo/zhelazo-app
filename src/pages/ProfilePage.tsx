import styles from "./ProfilePage.module.scss";
import { useEffect, useState } from "react";
import { Habit } from "../types/habit";

interface UserProfile {
    avatar: string;
    name: string;
    tag: string;
    email: string;
    registered: string;
}

const ProfilePage = () => {
    const userId = localStorage.getItem("token");

    // –ü—Ä–∏–≤—ã—á–∫–∏ —é–∑–µ—Ä–∞
    const allHabits: Habit[] = JSON.parse(localStorage.getItem("habits") || "[]");
    const userHabits = allHabits.filter(h => h.userId === userId);

    // –ü—Ä–æ—Ñ–∏–ª—å —é–∑–µ—Ä–∞
    const rawProfile = JSON.parse(localStorage.getItem(`userProfile_${userId}`) || "{}");

    const userProfile: UserProfile = {
        avatar: rawProfile.avatar || "üòà",
        name: rawProfile.name || "–ò–≥–æ—Ä—å",
        tag: rawProfile.tag || "@frontend_god_69",
        email: rawProfile.email || "igor@mail.com",
        registered: rawProfile.registered || "–º–∞—Ä—Ç 2025",
    };

    // –°—Ç–µ–π—Ç
    const [habitsCount, setHabitsCount] = useState(0);
    const [totalStreak, setTotalStreak] = useState(0);
    const [bestHabit, setBestHabit] = useState("‚Äî");

    // –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–∏–∫–∞ –æ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
    const calcHabitStreak = (habit: Habit): number => {
        const days = habit.days || {};
        const dates = Object.entries(days)
            .filter(([key, done]) => done && !key.includes("_") && !key.includes("W"))
            .map(([date]) => date)
            .sort();

        let streak = 0;
        let max = 0;
        let lastDate: Date | null = null;

        for (const dateStr of dates) {
            const [d, m, y] = dateStr.split(".").map(Number);
            const date = new Date(y, m - 1, d);

            if (lastDate) {
                const diff = (date.getTime() - lastDate.getTime()) / (1000 * 3600 * 24);
                if (diff === 1) {
                    streak++;
                } else {
                    streak = 1;
                }
            } else {
                streak = 1;
            }

            max = Math.max(max, streak);
            lastDate = date;
        }

        return max;
    };

    // useEffect
    useEffect(() => {
        setHabitsCount(userHabits.length);

        const streakSum = userHabits.reduce((acc: number, habit: Habit) => {
            return acc + calcHabitStreak(habit);
        }, 0);
        setTotalStreak(streakSum);

        const best = userHabits
            .map(habit => ({
                title: habit.title,
                streak: calcHabitStreak(habit)
            }))
            .sort((a, b) => b.streak - a.streak)[0]?.title || "‚Äî";

        setBestHabit(best);
    }, [userHabits]);

    // –ê—á–∏–≤–∫–∏
    const getAchievements = (): { icon: string; label: string }[] => {
        const achs = [];

        if (habitsCount >= 7) {
            achs.push({ icon: "üéØ", label: "7 –ø—Ä–∏–≤—ã—á–µ–∫ –º–∞—Å—Ç–µ—Ä–∞" });
        }

        const maxHabitStreak = Math.max(...userHabits.map(habit => calcHabitStreak(habit)), 0);

        if (maxHabitStreak >= 100) {
            achs.push({ icon: "üèÖ", label: "100 –¥–Ω–µ–π –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤" });
        } else if (maxHabitStreak >= 50) {
            achs.push({ icon: "‚≠ê", label: "50 –¥–Ω–µ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏" });
        }

        // –ü—Ä–æ–≥—Ä–µ—Å—Å
        const progressKey = `userProgress_${userId}`;
        const currentProgress = JSON.parse(localStorage.getItem(progressKey) || "{}");
        const motivationVisits = currentProgress.motivationVisits || 0;

        if (motivationVisits >= 5) {
            achs.push({ icon: "üßò", label: "–ó–∞–ª–µ—Ç–∞–ª –Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—é 5 —Ä–∞–∑" });
        } else if (motivationVisits > 0) {
            achs.push({ icon: "üßò", label: `–ü–æ—Å–µ—â–∞–ª –º–æ—Ç–∏–≤–∞—Ü–∏—é (${motivationVisits} —Ä–∞–∑)` });
        }

        if (maxHabitStreak >= 60) {
            achs.push({ icon: "üèÜ", label: "–í–æ—à–µ–ª –≤ –¢–û–ü" });
        }

        return achs;
    };

    // JSX
    return (
        <div className={styles.wrapper}>
            <h2 className={styles.pageTitle}>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>

            <div className={styles.profileBlock}>
                {/* –ò–Ω—Ñ–∞ */}
                <div className={styles.profileCard}>
                    <div className={styles.profileHeader}>
                        <span className={styles.profileAvatar}>{userProfile.avatar}</span>
                        <div>
                            <div className={styles.profileName}>{userProfile.name}</div>
                            <div className={styles.profileTag}>{userProfile.tag}</div>
                            <div className={styles.profileEmail}>üìß {userProfile.email}</div>
                            <div className={styles.profileRegistered}>üóì –° –Ω–∞–º–∏ —Å: {userProfile.registered}</div>
                        </div>
                    </div>
                </div>

                {/* –°—Ç–∞—Ç—ã */}
                <div className={styles.profileCard}>
                    <h3>üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                    <ul className={styles.profileStats}>
                        <li>‚úÖ –ü—Ä–∏–≤—ã—á–µ–∫: {habitsCount}</li>
                        <li>üî• –û–±—â–∏–π —Å—Ç—Ä–∏–∫: {totalStreak} –¥–Ω–µ–π</li>
                        <li>üèÖ –õ—É—á—à–∞—è –ø—Ä–∏–≤—ã—á–∫–∞: {bestHabit}</li>
                        <li>üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: –°–µ–≥–æ–¥–Ω—è</li>
                    </ul>
                </div>

                {/* –ê—á–∏–≤–∫–∏ */}
                <div className={styles.profileCard}>
                    <h3>üéñÔ∏è –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
                    <ul className={styles.profileAchievements}>
                        {getAchievements().map((ach, index) => (
                            <li key={index}>
                                <span className={styles.achIcon}>{ach.icon}</span> {ach.label}
                            </li>
                        ))}
                    </ul>
                </div>

                {/* –ö–Ω–æ–ø–∫–∞ */}
                <div style={{ textAlign: "center", marginTop: "1.5rem" }}>
                    <button className={styles.editButton}>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</button>
                </div>
            </div>
        </div>
    );
};

export default ProfilePage;